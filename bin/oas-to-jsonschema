#!/usr/bin/env php
<?php

$autoloaders = [
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/../../../autoload.php',
];

foreach ($autoloaders as $autoloader) {
    if (file_exists($autoloader)) {
        require_once $autoloader;
        break;
    }
}

use HSkrasek\OpenAPI\Command\ConvertCommand;
use HSkrasek\OpenAPI\Command\Stages\ConvertSchemaObject;
use HSkrasek\OpenAPI\Command\Stages\GetOpenAPISchemaFiles;
use HSkrasek\OpenAPI\Command\Stages\ParseSchemaFile;
use HSkrasek\OpenAPI\Command\Stages\ProcessSchemaFiles;
use HSkrasek\OpenAPI\Command\Stages\SaveJsonSchema;
use HSkrasek\OpenAPI\Converter;
use League\Flysystem\Adapter\Local;
use League\Flysystem\Filesystem;
use League\Flysystem\Plugin\ListFiles;
use League\JsonReference\Dereferencer;
use League\JsonReference\ReferenceSerializer\InlineReferenceSerializer;
use League\Pipeline\PipelineBuilder;
use Symfony\Component\Console\Application;

$filesystem = new Filesystem(new Local(getcwd()));
$filesystem->addPlugin(new ListFiles);

$dereferencer = Dereferencer::draft4();
$dereferencer->setReferenceSerializer(new InlineReferenceSerializer);

$pipelineBuilder = (new PipelineBuilder)
    ->add(new GetOpenAPISchemaFiles($filesystem))
    ->add(new ProcessSchemaFiles(
        (new PipelineBuilder)
            ->add(new ParseSchemaFile($filesystem))
            ->add(new ConvertSchemaObject(new Converter))
            ->build(),
        $dereferencer
    ))
    ->add(new SaveJsonSchema($filesystem));

$application = new Application('OpenAPI to JSON Schema Converter', '0.2.0');
$application->add(new ConvertCommand($filesystem, $pipelineBuilder->build()));
$application->run();
